/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_TEST_PB_H_INCLUDED
#define PB_TEST_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _sensorBMP { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    float bmp_temp; 
    float bmp_pressure; 
    float bmp_sea; 
    float bmp_altitude; 
} sensorBMP;

typedef struct _sensorBMPTH { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    float bmp_temp; 
    float bmp_pressure; 
    float bmp_sea; 
    float bmp_altitude; 
    float bmp_humid; 
} sensorBMPTH;

typedef struct _sensorGas { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    uint32_t gas; 
} sensorGas;

typedef struct _sensorGyroAccel { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    int32_t gyro; 
    int32_t accel; 
} sensorGyroAccel;

typedef struct _sensorT { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    float temp; 
} sensorT;

typedef struct _sensorTH { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    float temp; 
    float humidity; 
} sensorTH;

typedef struct _sensorTHC { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    float temp; 
    float humidity; 
    float capacitance; 
} sensorTHC;

typedef struct _sensorTHM { 
    uint32_t sensorProfile; 
    bool has_hwRev;
    uint32_t hwRev; 
    bool has_fwRev;
    uint32_t fwRev; 
    bool has_deviceType;
    uint32_t deviceType; 
    bool has_batteryPercentage;
    uint32_t batteryPercentage; 
    float temp; 
    float humidity; 
    float moisture; 
} sensorTHM;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define sensorT_init_default                     {0, false, 0, false, 0, false, 0, false, 0, 0}
#define sensorTH_init_default                    {0, false, 0, false, 0, false, 0, false, 0, 0, 0}
#define sensorTHM_init_default                   {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0}
#define sensorBMP_init_default                   {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0, 0}
#define sensorBMPTH_init_default                 {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0, 0, 0}
#define sensorGas_init_default                   {0, false, 0, false, 0, false, 0, false, 0, 0}
#define sensorGyroAccel_init_default             {0, false, 0, false, 0, false, 0, false, 0, 0, 0}
#define sensorTHC_init_default                   {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0}
#define sensorT_init_zero                        {0, false, 0, false, 0, false, 0, false, 0, 0}
#define sensorTH_init_zero                       {0, false, 0, false, 0, false, 0, false, 0, 0, 0}
#define sensorTHM_init_zero                      {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0}
#define sensorBMP_init_zero                      {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0, 0}
#define sensorBMPTH_init_zero                    {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0, 0, 0}
#define sensorGas_init_zero                      {0, false, 0, false, 0, false, 0, false, 0, 0}
#define sensorGyroAccel_init_zero                {0, false, 0, false, 0, false, 0, false, 0, 0, 0}
#define sensorTHC_init_zero                      {0, false, 0, false, 0, false, 0, false, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define sensorBMP_sensorProfile_tag              1
#define sensorBMP_hwRev_tag                      2
#define sensorBMP_fwRev_tag                      3
#define sensorBMP_deviceType_tag                 4
#define sensorBMP_batteryPercentage_tag          5
#define sensorBMP_bmp_temp_tag                   6
#define sensorBMP_bmp_pressure_tag               7
#define sensorBMP_bmp_sea_tag                    8
#define sensorBMP_bmp_altitude_tag               9
#define sensorBMPTH_sensorProfile_tag            1
#define sensorBMPTH_hwRev_tag                    2
#define sensorBMPTH_fwRev_tag                    3
#define sensorBMPTH_deviceType_tag               4
#define sensorBMPTH_batteryPercentage_tag        5
#define sensorBMPTH_bmp_temp_tag                 6
#define sensorBMPTH_bmp_pressure_tag             7
#define sensorBMPTH_bmp_sea_tag                  8
#define sensorBMPTH_bmp_altitude_tag             9
#define sensorBMPTH_bmp_humid_tag                10
#define sensorGas_sensorProfile_tag              1
#define sensorGas_hwRev_tag                      2
#define sensorGas_fwRev_tag                      3
#define sensorGas_deviceType_tag                 4
#define sensorGas_batteryPercentage_tag          5
#define sensorGas_gas_tag                        6
#define sensorGyroAccel_sensorProfile_tag        1
#define sensorGyroAccel_hwRev_tag                2
#define sensorGyroAccel_fwRev_tag                3
#define sensorGyroAccel_deviceType_tag           4
#define sensorGyroAccel_batteryPercentage_tag    5
#define sensorGyroAccel_gyro_tag                 6
#define sensorGyroAccel_accel_tag                7
#define sensorT_sensorProfile_tag                1
#define sensorT_hwRev_tag                        2
#define sensorT_fwRev_tag                        3
#define sensorT_deviceType_tag                   4
#define sensorT_batteryPercentage_tag            5
#define sensorT_temp_tag                         6
#define sensorTH_sensorProfile_tag               1
#define sensorTH_hwRev_tag                       2
#define sensorTH_fwRev_tag                       3
#define sensorTH_deviceType_tag                  4
#define sensorTH_batteryPercentage_tag           5
#define sensorTH_temp_tag                        6
#define sensorTH_humidity_tag                    7
#define sensorTHC_sensorProfile_tag              1
#define sensorTHC_hwRev_tag                      2
#define sensorTHC_fwRev_tag                      3
#define sensorTHC_deviceType_tag                 4
#define sensorTHC_batteryPercentage_tag          5
#define sensorTHC_temp_tag                       6
#define sensorTHC_humidity_tag                   7
#define sensorTHC_capacitance_tag                8
#define sensorTHM_sensorProfile_tag              1
#define sensorTHM_hwRev_tag                      2
#define sensorTHM_fwRev_tag                      3
#define sensorTHM_deviceType_tag                 4
#define sensorTHM_batteryPercentage_tag          5
#define sensorTHM_temp_tag                       6
#define sensorTHM_humidity_tag                   7
#define sensorTHM_moisture_tag                   8

/* Struct field encoding specification for nanopb */
#define sensorT_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, FLOAT,    temp,              6)
#define sensorT_CALLBACK NULL
#define sensorT_DEFAULT NULL

#define sensorTH_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, FLOAT,    temp,              6) \
X(a, STATIC,   REQUIRED, FLOAT,    humidity,          7)
#define sensorTH_CALLBACK NULL
#define sensorTH_DEFAULT NULL

#define sensorTHM_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, FLOAT,    temp,              6) \
X(a, STATIC,   REQUIRED, FLOAT,    humidity,          7) \
X(a, STATIC,   REQUIRED, FLOAT,    moisture,          8)
#define sensorTHM_CALLBACK NULL
#define sensorTHM_DEFAULT NULL

#define sensorBMP_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_temp,          6) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_pressure,      7) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_sea,           8) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_altitude,      9)
#define sensorBMP_CALLBACK NULL
#define sensorBMP_DEFAULT NULL

#define sensorBMPTH_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_temp,          6) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_pressure,      7) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_sea,           8) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_altitude,      9) \
X(a, STATIC,   REQUIRED, FLOAT,    bmp_humid,        10)
#define sensorBMPTH_CALLBACK NULL
#define sensorBMPTH_DEFAULT NULL

#define sensorGas_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, UINT32,   gas,               6)
#define sensorGas_CALLBACK NULL
#define sensorGas_DEFAULT NULL

#define sensorGyroAccel_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, INT32,    gyro,              6) \
X(a, STATIC,   REQUIRED, INT32,    accel,             7)
#define sensorGyroAccel_CALLBACK NULL
#define sensorGyroAccel_DEFAULT NULL

#define sensorTHC_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   sensorProfile,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   hwRev,             2) \
X(a, STATIC,   OPTIONAL, UINT32,   fwRev,             3) \
X(a, STATIC,   OPTIONAL, UINT32,   deviceType,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   batteryPercentage,   5) \
X(a, STATIC,   REQUIRED, FLOAT,    temp,              6) \
X(a, STATIC,   REQUIRED, FLOAT,    humidity,          7) \
X(a, STATIC,   REQUIRED, FLOAT,    capacitance,       8)
#define sensorTHC_CALLBACK NULL
#define sensorTHC_DEFAULT NULL

extern const pb_msgdesc_t sensorT_msg;
extern const pb_msgdesc_t sensorTH_msg;
extern const pb_msgdesc_t sensorTHM_msg;
extern const pb_msgdesc_t sensorBMP_msg;
extern const pb_msgdesc_t sensorBMPTH_msg;
extern const pb_msgdesc_t sensorGas_msg;
extern const pb_msgdesc_t sensorGyroAccel_msg;
extern const pb_msgdesc_t sensorTHC_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define sensorT_fields &sensorT_msg
#define sensorTH_fields &sensorTH_msg
#define sensorTHM_fields &sensorTHM_msg
#define sensorBMP_fields &sensorBMP_msg
#define sensorBMPTH_fields &sensorBMPTH_msg
#define sensorGas_fields &sensorGas_msg
#define sensorGyroAccel_fields &sensorGyroAccel_msg
#define sensorTHC_fields &sensorTHC_msg

/* Maximum encoded size of messages (where known) */
#define sensorBMPTH_size                         55
#define sensorBMP_size                           50
#define sensorGas_size                           36
#define sensorGyroAccel_size                     52
#define sensorTHC_size                           45
#define sensorTHM_size                           45
#define sensorTH_size                            40
#define sensorT_size                             35

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
